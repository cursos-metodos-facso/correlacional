---
title: "Tabals en reportes dinámicos"
date: "2023-09-29"
lang: es
website:
  comments:
    giscus:
      repo: cursos-metodos-facso/correlacional
---

# Objetivo de la práctica

El objetivo de esta guía práctica es aprender cómo generar, reportar y referenciar tablas en documentos dinámicos mediante Quarto.

## Recursos de la práctica

En esta práctica trabajaremos con un subconjunto de datos previamente procesados derivados de las encuestas realizadas en diferentes países por el [Latin American Public Opinion Proyect (LAPOP)](https://www.vanderbilt.edu/lapop/) en su ola del 2018. Para este ejercicio, obtendremos directamente esta base desde internet. No obstante, también tienes la opción de acceder a la misma información a través del siguiente enlace: [{{< fa table >}} `LAPOP 2018`](https://github.com/cursos-metodos-facso/datos-ejemplos/raw/main/lapop_proc_2018.RData). Desde allí, podrás descargar el archivo que contiene el subconjunto procesado de la base de datos LAPOP 2018.


# Crear un documento Quarto

Recordemos que, para generar un archivo en quarto, hacemos lo siguiente: 

![](../files/crear-qmd.gif)

## Chunks

Para integrar código de R en un archivo `Quarto` usamos los `chunks`, que son *trozos* de código dentro de nuestra hoja. Estos permiten hacer análisis dentro del documento visualizando los resultados en el documento final.

Los chunks se ven así dentro del .qmd:

    `r ''```{r}
    # El codigo va aquí

    ```

#### Insertar chunks

Hay tres formas de insertar chunks:

1.  Pulsar `⌘⌥I` en macOS o `Control + Alt + I` en Windows

2.  Pulsa el botón "Insert" en la parte superior de la ventana del editor

```{r insert, echo=FALSE, out.width="40%"}
knitr::include_graphics("../files/insertchunkquarto.png", error = FALSE)
```

3.  Escribirlo manualmente

#### Nombre de chunk

Para añadir un nombre, inclúyelo inmediatamente después de la `{r` en la primera línea del chunk. Los nombres no pueden contener espacios, pero sí guiones bajos y guiones.

Importante: **Todos los nombres de chunk de tu documento deben ser únicos.**

    `r ''```{r nombre-chunk}
    # El codigo va aquí

    ```
    
#### Opciones de chunk

Hay distintas opciones diferentes que puedes establecer para cada chunk. Puedes ver una lista completa en la [Guía de referencia de RMarkdown](https://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf) o en el [sitio web de **knitr**](https://yihui.org/knitr/options/). Estos recursos se crearon inicialmente para RMarkdown, pero también son aplicables a [Quarto](https://quarto.org/docs/computations/r.html#chunk-options).

En Quarto, las opciones del chunk van inmediatamente después de la sección `{r}`. Para especificar una opción, se debe partir con `#|`, luego la opción y luego el valor lógico. Por ejemplo:

    `r ''```{r nombre-chunk, message = FALSE, echo = TRUE}
    #| message: FALSE
    #| echo: TRUE

    # El codigo va aquí

    ```

Otra forma de hacerlo es **configurar** las opciones generales de todos los chunks que hagamos **al inicio del documento** en el YAML:


    `execute: 
  echo: false
  eval: true
  message: false
  warning: false
  include: true`

De esta manera ya no es necesario indicar en _cada_ chunk las opciones, y se aplicaran las configuraciones generales que indicamos al comienzo. 

# Preparación de datos

Comencemos por preparar nuestros datos. Iniciamos cargando las librerías necesarias.

```{r librerias, echo=TRUE, message=FALSE, warning=FALSE, collapse=TRUE}
pacman::p_load(tidyverse, # Manipulacion datos
               sjmisc, # Descriptivos
               kableExtra, #Tablas
               stargazer, # Tablas
               ggrepel
               ) # Graficos

options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
```

Cargamos los datos desde internet.

```{r datos, echo=TRUE, message=FALSE, warning=FALSE}

load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/main/lapop_proc_2018.RData")) #Cargar base de datos

# Un pequeño procesamiento para algunas variables que usaremos más adelante

lapop <- lapop %>% mutate(across(c("gini", "gdp"), ~ as.numeric(.))) 

```

A continuación, exploramos la base de datos **lapop**.

```{r exploracion, echo=TRUE, message=FALSE, warning=FALSE}

names(lapop) # Nombre de columnas
dim(lapop) # Dimensiones

```
Contamos con 39 variables (columnas) y 23.386 observaciones (filas).

# Tablas con Kable

La mejor forma de generar tablas para documentos dinámicos es con la función `kable()` del paquete `knitr` y las distintas funciones de formateo que ofrece el paquete `kableExtra`. Esto se debe a que `kable()` y las funciones de `kableExtra` aplican estilo y formato a un objeto de R (generalmente un `data.frame`). Esto quiere decir que para hacer una tabla debemos:

1) Procesar nuestros datos de manera que genermos un objeto tipo `data.frame` (u otros similares) con la información requerida. Esto lo hacemos a través de `dplyr` o algún otro paquete dedicado al manejo de datos.

2) Aplicar el estilo y el formateo que queramos para ese objeto. Esto lo hacemos a través de `kableExtra` (hay otras opciones, por ejemplo `flextable`, pero no es tan buena).

Ejemplifiquemos con nuestros datos.

Primero, generaremos un objeto llamado `tab1` que usaremos como contenido de la tabla. Este objeto tendrá la distribución de `it1` (confianza interpersonal) por país.

```{r, echo=TRUE, message=FALSE, warning=FALSE}

tab1 <- lapop %>%
  group_by(pais, it1) %>% # agrupamos por pais y variable
  summarise(n = n()) %>% # contamos por categ de respuesta
  mutate(prop = round((n / sum(n)) * 100, 2)) %>% # porcentaje
  na.omit() %>% # borramos NA
  pivot_wider(id_cols = pais, names_from = it1, values_from = prop) # convertimos a formato ancho

tab1
```

**Creemos nuestra tabla**. Usemos primero la función `kable()` directamente:

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tab1 %>% 
  kableExtra::kable()
```

Ahora tenemos una tabla, pero es muy simple y poco presentable. Especifiquemos opciones de formato:

- `format`: para especificar formato de la tabla (html, markdown, latex)
- `aling`: para especificar alineacion de las celdas ('r'=derecha, 'c'=centro, 'l'=izquierda),
- `col.names`: para nombres de columnas visibles en la tabla, se ingresan como un vector `c()`

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tab1 %>% 
  kableExtra::kable(format = "html",
                    align = "c",
                    col.names = c("País", "Nada confiable", "Poco confiable", "Algo confiable", "Muy confiable"))
```

Ahora agregemos otros elementos importantes, como el título, estilo y fuente a la tabla:

- `caption`: para dar titulo de la tabla
- `kable_classic()`: para dar estilo (revisar otros [aquí](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html#Getting_Started))
- `add_footnote()`: para agregar fuente o pie a la tabla

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tab1 %>% 
  kableExtra::kable(format = "html",
                    align = "c",
                    col.names = c("País", "Nada confiable", "Poco confiable", "Algo confiable", "Muy confiable"),
                    caption = "Tabla 1. Confianza interpersonal según país") %>% 
  kableExtra::kable_classic() %>% 
  kableExtra::add_footnote(label = "Fuente: Elaboración propia en base a LAPOP 2018.")
```

¿Muy grande? También podemos ajustar el ancho que ocupa la tabla, el tamaño de la letra y la posición:

- `full_width`: para indicar si la tabla cubre todo el ancho o no (`TRUE`/`FALSE`) 
- `position`: para indicar posición de la tabla en el documento
- `font_size`: para indicar tamaño de la letra

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tabla1 <- tab1 %>% 
  kableExtra::kable(format = "html",
                    align = "c",
                    col.names = c("País", "Nada confiable", "Poco confiable", "Algo confiable", "Muy confiable"),
                    caption = "Tabla 1. Confianza interpersonal según país") %>% 
  kableExtra::kable_classic(full_width = FALSE, position = "center", font_size = 14) %>% 
  kableExtra::add_footnote(label = "Fuente: Elaboración propia en base a LAPOP 2018.")

tabla1
```

En este caso, nuestro ejemplo fue para una variable categorica. Sin embargo, podríamos hacer lo mismo para una variable continua y crear una tabla con los principales estadisticos descriptivos.

Creemos el objeto `tab2`, el cual serán los estadísticos descriptivos de la variable `edad` por país en nuestra base de datos.

 ```{r}
 tab2 <- lapop %>% 
    group_by(pais) %>% 
    summarise(
        n = n(),
        min = min(edad, na.rm = T),
        max = max(edad, na.rm = T),
        media = round(mean(edad, na.rm = T), 2),
        sd = round(sd(edad, na.rm = T), 2),
        mediana = median(edad, na.rm = T),
        cv = round((media/sd)*100, 2)
        )
 ```

Y ahora apliquemos el formato con `kable()` y las funcionalidades del paquete de `kableExtra`:

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tabla2 <- tab2 %>% 
  kableExtra::kable(format = "html",
                    align = "c",
                    col.names = c("País", "Tamaño muestral", "Mínimo", "Máximo", "Media", "Desv. estándar", "Mediana", "Coef. variación"),
                    caption = "Tabla 2. Edad según país") %>% 
  kableExtra::kable_classic(full_width = FALSE, position = "center", font_size = 14) %>% 
  kableExtra::add_footnote(label = "Fuente: Elaboración propia en base a LAPOP 2018.")

tabla2
```

Para ver todas las funcionalidades y estilos que se pueden generar con `kableExtra`, ver [aquí](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html).

# Tablas con otros paquetes

Si bien `kableExtra` es la mejor forma para referenciar, ya que nos da mayor contrtol del contenido y el formato, existen otras funciones. Las funciones varían de acuerdo a qué es lo que se quiere reportar, es decir, si es una variable categorica o númerica y si es un estadístico univariado o bivariado.

## stargazer

`startazer` es un paquete que permite reportar análisis univariados y multivariados en distintos formatos (html o LaTex). Para efectos de este curso, nos es especialmente útil para ver de manera rápida estadísticos descriptivos de muchas variables al mismo tiempo. Para ello utilizamos la función `stargazer()`:

```{r}
# Un pequeño procesamiento ya que algunas variables que queremos visualizar son character en vez de númericas
data <- lapop %>% 
    mutate(across(c("gini", "gdp"), ~ as.numeric(.))) %>% 
    select(edad, gini, gdp)

stargazer::stargazer(as.data.frame(lapop %>% select(edad, gini, gdp)), type = "html")
```

## sjmisc

Otra alternativa para sacar sacar estadísticos descriptivos de varias columnas de una base de datos con la función `descr` del paquete `sjmisc`. Combinado con `kable()`, podemos presentarla en un documento dinámico:

```{r}
sjmisc::descr(lapop %>% select(edad, gini, gdp)) %>% kable()
```

Este paquete también tiene opciones de tablas de frecuencias, las cuales son útiles para el reporte de variable categóricas. Una de sus principales virtudes es que incluye las `labels` en la tabla:

```{r}
sjmisc::frq(lapop$it1) %>% kable()
```

También podemos utilizar la función `frq` para análisis bivariados. Por ejemplo, podríamos replicar nuestro análisis de confianza interpersonal por país, sin necesidad de nosotros crear el `data.frame`

## sjPlot

## summarytools

# Autoreferenciar elementos dentro un R Markdown

Una de las ventajas de usar documentos dinámicos con Quarto es que podemos **autoreferenciar los elementos que creamos dentro del mismo documento**.

::: {.callout-tip}
#### ¿Autoreferenciar?

Esto se refiere que, si en un documento creamos una tabla, podemos citarlo o referenciarlo en el texto que escribamos, generando un enlace que al pincharlo llevará a dicha figura (en el orden establecido en el documento).
:::

Para hacer esto **debemos darle un  _label_ al chunk** en donde producimos la tabla o gráfico en nuestro documento. Tomemos por ejemplo la misma `tabla1` que generamos anteriormente, pero ahora les daremos un nombre al chunk en donde ejecutaremos dichos elementos. 

¿Qué nombre le ponemos? hay que considerar lo siguiente:

- Cuando es una **tabla** debemos nombrar al chunk con el prefijo **`tbl-`** antes del nombre respectivo. 

¿Cómo las referenciamos? para referenciar tablas o debemos usar el prefijo `@` antes del nombre que le dimos al elemento. 

#### a) Tablas 

Por ejemplo, si queremos referenciar a nuestra `tabla1`, en el chunk en donde la ejecutemos debemos indicar:

    `r ''````{r}
    #| label: tbl-confianza

    tabla1
    ````

```{r}
#| label: tbl-confianza
#| tbl-cap: "Confianza interpersonal según país"
#| tbl-cap-location: top
#| warning: false
tabla1

names(lapop)
```

En este caso, a nuestra tabla le daremos el nombre de _confianza_ más el prefijo `tbl-`. Y para referenciar dentro de un texto a la tabla usamos: `@tbl-confianza`.

Texto de ejemplo:

> En la @tbl-confianza se muestra la distribución porcentual del grado de confianza interpersonal por país. 

#### b) Resultados

También podemos referenciar a resultados estadísticos que hayamos realizado con anterioridad en nuestro documento. 

Como ejemplo, obtengamos la correlación entre el índice de Gini de los países y su producto interno bruto (PIB) y lo guardamos en un objeto `M`.

```{r cor, echo=TRUE, message=FALSE, warning=FALSE}
M <- cor(lapop$gini, lapop$gdp)

M
```


Para referenciar este resultado, usamos en el texto:

    `r ''
    
    ` `r `
    
Dentro de las comillas ' ' y después de la letra _r_, indicamos el nombre del objeto que contiene un resultado. En este caso, para referenciar el resultado indicamos: 

![](../files/resul-m.png)

Texto de ejemplo:

> El coeficiente de correlación de Pearson entre el índice de Gini y el producto interno bruto es negativo y pequeño = `r M`.


# Resumen

Hoy aprendimos a generar y presentar tablas en documentos dinámicos con Quarto, así como también a autoreferenciar elementos dentro de un documento qmd. En detalle, aprendímos:

1.  Generación y presentación de tablas en Quarto a través de `kable()` y `kableExtra`
2.  Otras opciones de tablas rapidas para distintos tipos de análisis
3.  Cómo autoreferenciar elementos dentro un documento Quarto.
