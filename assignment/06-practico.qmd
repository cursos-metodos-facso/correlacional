---
title: "Tablas en reportes dinámicos"
date: "2024-10-12"
lang: es
website:
  comments:
    giscus:
      repo: cursos-metodos-facso/correlacional
---

# Objetivo de la práctica

El objetivo de esta guía práctica es aprender cómo generar, reportar y referenciar tablas en documentos dinámicos mediante Quarto.

## Recursos de la práctica

En esta práctica trabajaremos con un subconjunto de datos previamente procesados derivados de las encuestas realizadas en diferentes países por el [Latin American Public Opinion Proyect (LAPOP)](https://www.vanderbilt.edu/lapop/) en su ola del 2018. Para este ejercicio, obtendremos directamente esta base desde internet. No obstante, también tienes la opción de acceder a la misma información a través del siguiente enlace: [{{< fa table >}} `LAPOP 2018`](https://github.com/cursos-metodos-facso/datos-ejemplos/raw/main/lapop_proc_2018.RData). Desde allí, podrás descargar el archivo que contiene el subconjunto procesado de la base de datos LAPOP 2018.

# Crear un documento Quarto

Recordemos que, para generar un archivo en quarto, hacemos lo siguiente: 

![](../files/crear-qmd.gif)

## Chunks

Para integrar código de R en un archivo `Quarto` usamos los `chunks`, que son *trozos* de código dentro de nuestra hoja. Estos permiten hacer análisis dentro del documento visualizando los resultados en el documento final. Un chunk se especifica mediante una línea de código inicial ` ```{r}`, y se cierra con ` ``` `

Los chunks se ven así dentro del .qmd:

````
```{r}`r ''`
1 + 1
```
````

### Insertar chunks

Hay tres formas de insertar chunks:

1.  Pulsar `⌘⌥I` en macOS o `Control + Alt + I` en Windows

2.  Pulsa el botón "Insert" en la parte superior de la ventana del editor

```{r insert, echo=FALSE, out.width="40%"}
knitr::include_graphics("../files/insertchunk.png", error = FALSE)
```

3.  Escribirlo manualmente

### Nombre de chunk

Para añadir un nombre, inclúyelo inmediatamente después de la `{r` en la primera línea del chunk. Los nombres no pueden contener espacios, pero sí guiones bajos y guiones.

Importante: **Todos los nombres de chunk de tu documento deben ser únicos.**

````
```{r nombre-chunk}`r ''`
1 + 1
```
````
    
### Opciones de chunk

Hay distintas opciones diferentes que puedes establecer para cada chunk. Puedes ver una lista completa en la [Guía de referencia de RMarkdown](https://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf) o en el [sitio web de **knitr**](https://yihui.org/knitr/options/). Estos recursos se crearon inicialmente para RMarkdown, pero también son aplicables a [Quarto](https://quarto.org/docs/computations/r.html#chunk-options).

En Quarto, las opciones del chunk van inmediatamente después de la sección `{r}`. Para especificar una opción, se debe partir con `#|`, luego la opción y luego el valor lógico. Por ejemplo:

````
```{r}`r ''`
#| message: false
#| echo: true
1 + 1
```
````

Otra forma de hacerlo es **configurar** las opciones generales de todos los chunks que hagamos **al inicio del documento** en el YAML:

```{r, echo=FALSE, out.width="40%"}
knitr::include_graphics("../files/yaml2.png", error = FALSE)
```

De esta manera ya no es necesario indicar en _cada_ chunk las opciones, y se aplicaran las configuraciones generales que indicamos al comienzo. 

## Preparación de datos

Comencemos por preparar nuestros datos. Iniciamos cargando las librerías necesarias.

```{r librerias, echo=TRUE, message=FALSE, warning=FALSE, collapse=TRUE}
pacman::p_load(tidyverse, # Manipulacion datos
               sjmisc, # Descriptivos
               knitr, # Render y tablas
               kableExtra, # Formateo tablas
               summarytools, # Tablas
               sjPlot, # Tablas y gráficos
               stargazer, # Tablas
               janitor, # Tablas y formateo
               crosstable, # Tablas
               table1 # Tablas
               ) 

options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
```

Cargamos los datos desde internet.

```{r datos, echo=TRUE, message=FALSE, warning=FALSE}

load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/main/lapop_proc_2018.RData")) #Cargar base de datos

# Un pequeño procesamiento para algunas variables que usaremos más adelante
lapop <- lapop %>% mutate(across(c("gini", "gdp"), ~ as.numeric(.))) 

```

A continuación, exploramos la base de datos **lapop**.

```{r exploracion, echo=TRUE, message=FALSE, warning=FALSE}

names(lapop) # Nombre de columnas
dim(lapop) # Dimensiones

```
Contamos con 39 variables (columnas) y 23.386 observaciones (filas).

# Tablas con Kable

La mejor forma de generar tablas para documentos dinámicos es con la función `kable()` del paquete `knitr` y las distintas funciones de formateo que ofrece el paquete `kableExtra`. Esto se debe a que `kable()` y las funciones de `kableExtra` aplican estilo y formato a un objeto de R (generalmente un `data.frame`). Esto quiere decir que para hacer una tabla debemos:

1. Procesar nuestros datos de manera que genermos un objeto tipo `data.frame` (u otros similares) con la información requerida. Esto lo hacemos a través de `dplyr` o algún otro paquete dedicado al manejo de datos.

2. Aplicar el estilo y el formateo que queramos para ese objeto. Esto lo hacemos a través de `kableExtra` (hay otras opciones, por ejemplo [`flextable`](https://ardata-fr.github.io/flextable-book/), pero no es tan buena).

Ejemplifiquemos con nuestros datos.

Primero, generaremos un objeto llamado `tab1` que usaremos como contenido de la tabla. Este objeto tendrá la distribución de `it1` (confianza interpersonal) por país, es decir, es una tabla bivariada.

```{r, echo=TRUE, message=FALSE, warning=FALSE}

tab1 <- lapop %>%
  group_by(pais, it1) %>% # agrupamos por pais y variable
  summarise(n = n()) %>% # contamos por categ de respuesta
  mutate(prop = round((n / sum(n)) * 100, 2)) %>% # porcentaje
  na.omit() %>% # borramos NA
  pivot_wider(id_cols = pais, names_from = it1, values_from = prop) # convertimos a formato ancho

tab1
```

**Creemos nuestra tabla**. Usemos primero la función `kable()` directamente:

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tab1 %>% kable()
```

Ahora tenemos una tabla, pero es muy simple y poco presentable. Especifiquemos opciones de formato:

- `format`: para especificar formato de la tabla (html, markdown, latex)
- `aling`: para especificar alineacion de las celdas ('r'=derecha, 'c'=centro, 'l'=izquierda),
- `col.names`: para nombres de columnas visibles en la tabla, se ingresan como un vector `c()`

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tab1 %>% 
  kable(
    format = "html",
    align = "c",
    col.names = c("País", "Nada confiable", "Poco confiable", "Algo confiable", "Muy confiable"))
```

Ahora agregemos otros elementos importantes, como el título, estilo y fuente a la tabla:

- `caption`: para dar titulo de la tabla
- `kable_classic()`: para dar estilo
- `add_footnote()`: para agregar fuente o pie a la tabla

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tab1 %>% 
  kable(format = "html",
                    align = "c",
                    col.names = c("País", "Nada confiable", "Poco confiable", "Algo confiable", "Muy confiable"),
                    caption = "Tabla 1. Confianza interpersonal según país") %>% 
  kableExtra::kable_classic() %>% 
  kableExtra::add_footnote(label = "Fuente: Elaboración propia en base a LAPOP 2018.")
```

¿Muy grande? También podemos ajustar el ancho que ocupa la tabla, el tamaño de la letra y la posición:

- `full_width`: para indicar si la tabla cubre todo el ancho o no (`TRUE`/`FALSE`) 
- `position`: para indicar posición de la tabla en el documento
- `font_size`: para indicar tamaño de la letra

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tabla1 <- tab1 %>% 
  kable(format = "html",
                    align = "c",
                    col.names = c("País", "Nada confiable", "Poco confiable", "Algo confiable", "Muy confiable"),
                    caption = "Tabla 1. Confianza interpersonal según país") %>% 
  kableExtra::kable_classic(full_width = FALSE, position = "center", font_size = 14) %>% 
  kableExtra::add_footnote(label = "Fuente: Elaboración propia en base a LAPOP 2018.")

tabla1
```

En este caso, nuestro ejemplo fue para hacer una tabla bivariada con dos variables categóricas. Sin embargo, podríamos hacer lo mismo para una variable continua y crear una tabla bivariada con los principales estadisticos descriptivos.

Creemos el objeto `tab2`, el cual serán los estadísticos descriptivos de la variable `edad` por país en nuestra base de datos.

 ```{r, echo=TRUE, warning=FALSE, message=FALSE}
 tab2 <- lapop %>% 
    group_by(pais) %>% 
    summarise(
        n = n(), # Tamaño muestral
        min = min(edad, na.rm = T), # Mínimo
        max = max(edad, na.rm = T), # Máximo
        media = round(mean(edad, na.rm = T), 2), # Media redondeada a 2 digitos
        sd = round(sd(edad, na.rm = T), 2), # Desviación estándar redondeada a 2 digitos
        mediana = median(edad, na.rm = T), # Mediana
        cv = round((media/sd)*100, 2) # Coeficiente de variación redondeado a 2 digi
        )
 ```

Y ahora apliquemos el formato con `kable()` y las funcionalidades del paquete de `kableExtra`:

```{r, echo=TRUE, warning=FALSE, message=FALSE}
tabla2 <- tab2 %>% 
  kable(format = "html",
                    align = "c",
                    col.names = c("País", "Tamaño muestral", "Mínimo", "Máximo", "Media", "Desv. estándar", "Mediana", "Coef. variación"),
                    caption = "Tabla 2. Edad según país") %>% 
  kableExtra::kable_classic(full_width = FALSE, position = "center", font_size = 14) %>% 
  kableExtra::add_footnote(label = "Fuente: Elaboración propia en base a LAPOP 2018.")

tabla2
```

Para ver todas las funcionalidades y estilos que se pueden generar con `kableExtra`, ver [aquí](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html).

# Tablas con otros paquetes

Si bien la combinación de crear nuestra tabla (probablemente con `dplyr`) y formatear con `kableExtra` es la mejor forma para reportar tablas, existen otras funciones. Las funciones varían de acuerdo a qué es lo que se quiere reportar, es decir, si es una variable categorica o númerica y si es el reporte debe ser univariado o bivariado. De todos modos, solo algunas funciones tienen una salida directa en HTML (pensando en que se utilizarán en Quarto), por lo que algunas veces solo nos ahorraremos el procesamiento, el formateo deberemos hacerlo igual.

La principal virtud de estas funciones es que nos ahorra hacer el procesamiento de la tabla. Sin embargo, el desafío es que debemos saber bien qué es lo que queremos reportar para utilizar la función adecuada.

A continuación, presentaremos algunas de las funcionas más conocidas, dividiendo si son para tablas univariadas o bivariadas.

Vamos a crear una versión recortada de **lapop** para ejemplifcar cada función:

```{r}
# Creemos una version de lapop solo con algunas variables como ejemplo
data_example <- lapop %>% 
  select(pais, it1, edad, sexo, gini, gdp)

```

## Funciones para tablas univariadas

Estas tablas suelen incluir estadísticas descriptivas de una sola variable como medias, medianas, desviaciones estándar, entre otras.

### [`summarytools`](https://cran.r-project.org/web/packages/summarytools/vignettes/introduction.html):

- `summarytools::dfSummary():` Genera un resumen univariado completo de cada variable en el dataset, con estadísticas, frecuencia de valores y gráficos.

```{r message=FALSE, warning=FALSE}
summarytools::dfSummary(data_example) %>% 
  summarytools::view(method = "render") 
```

- `summarytools::descr():` Proporciona estadísticas descriptivas para variables numéricas.

```{r message=FALSE, warning=FALSE}
summarytools::descr(data_example$edad) %>%
  summarytools::view(method = "render")
```

### [`stargazer`](https://cran.r-project.org/web/packages/stargazer/vignettes/stargazer.pdf):

- `stargazer::stargazer()`: Para reportar estadísticas descriptivas.

```{r message=FALSE, warning=FALSE, results='asis'}
stargazer(as.data.frame(data_example), type = "html", summary.stat = c("mean", "sd", "min", "max"))
```

### [`psych`](https://personality-project.org/r/html/describe.html):

- `psych::describe()`: Calcula estadísticas descriptivas adicionales, como curtosis y asimetría.

```{r message=FALSE, warning=FALSE}
psych::describe(data_example) %>%
  kable() %>%
  kable_styling(full_width = TRUE)
```

### [`sjmisc`](https://strengejacke.github.io/sjmisc/articles/exploringdatasets.html):

- `sjmisc::frq()`: Para tablas de frecuencias detalladas de variables categóricas. Incluye labels.

```{r message=FALSE, warning=FALSE}
sjmisc::frq(data_example$it1) %>%
  kable() %>%
  kable_styling(full_width = TRUE)
```

### [`table1`](https://cran.r-project.org/web/packages/table1/vignettes/table1-examples.html):

- `table1::table1()`: Permite ver tanto variables categoricas como numericas en la misma tabla de manera estética

```{r message=FALSE, warning=FALSE}
table1::table1(~ factor(sexo) + edad + gini + gdp, data = data_example)
```

## Funciones para tablas bivariadas

Las tablas bivariadas permiten explorar relaciones entre pares de variables, útiles para comparar medias o analizar frecuencias conjuntas en tablas de contingencia.

### [`sjPlot`:](https://strengejacke.github.io/sjPlot/articles/table_css.html)

-  `sjPlot::tab_xtab()`: Produce tablas cruzadas de frecuencias y porcentajes, y es útil para comparar variables categóricas entre grupos.

```{r message=FALSE, warning=FALSE}
sjPlot::tab_xtab(data_example$pais, data_example$it1, show.row.prc = TRUE)
```

### [`summarytools`](https://cran.r-project.org/web/packages/summarytools/vignettes/introduction.html):

- `summarytools::ctable()`: Para tablas de contingencia que incluyen porcentajes y frecuencias, con opciones de personalización.

```{r message=FALSE, warning=FALSE}
summarytools::ctable(data_example$pais, data_example$sexo) %>% 
  summarytools::view(method = "render")
```

### [`crosstable`](https://cran.r-project.org/web/packages/crosstable/vignettes/crosstable.html):

- `crosstable::crosstable()`: También produce tablas de continencia con opciones de personalización.

```{r message=FALSE, warning=FALSE}
crosstable::crosstable(data_example, pais, by = sexo, margin=c("row", "col"), total = "both") %>% 
  kable() %>%
  kable_styling(full_width = TRUE)
```

### [`table1`](https://cran.r-project.org/web/packages/table1/vignettes/table1-examples.html):

- `table1::table1()`: También se puede utilizar agrupando las variables (numericas o categoricas) por alguna variable categórica. 

```{r message=FALSE, warning=FALSE}
table1::table1(~ factor(sexo) + edad + gini + gdp | pais, data = data_example)
```

### [`dplyr`](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html) y [`janitor`](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html):

- dplyr + `janitor::tabyl()`: Puedes hacer resúmenes bivariados personalizados con count() o group_by(), y tabyl() genera tablas de contingencia de frecuencias para un vistazo rápido.

```{r}
data_example %>%
  janitor::tabyl(pais, it1) %>% # Esto reemplaza el procesamiento, buena alternativa
  kable() %>%
  kable_styling(full_width = TRUE)
```

# Autoreferenciar elementos dentro un documento dinámico

Una de las ventajas de usar documentos dinámicos con Quarto es que podemos **autoreferenciar los elementos que creamos dentro del mismo documento**.

::: {.callout-tip}
#### ¿Autoreferenciar?

Esto se refiere que, si en un documento creamos una tabla, podemos citarlo o referenciarlo en el texto que escribamos, generando un enlace que al pincharlo llevará a dicha figura (en el orden establecido en el documento).
:::

Para hacer esto **debemos darle un  _label_ al chunk** en donde producimos la tabla o gráfico en nuestro documento. Tomemos por ejemplo la misma `tabla1` que generamos anteriormente, pero ahora les daremos un nombre al chunk en donde ejecutaremos dichos elementos. 

¿Qué nombre le ponemos? hay que considerar que cuando es una **tabla** debemos nombrar al chunk con el prefijo **`tbl-`** antes del nombre respectivo. 

¿Cómo las referenciamos? para referenciar tablas o debemos usar el prefijo `@` antes del nombre que le dimos al elemento. 

## a. Tablas 

Por ejemplo, si queremos referenciar a nuestra `tabla1`, en el chunk en donde la ejecutemos debemos indicar:

````
```{r}`r ''`
#| label: tbl-confianza

tabla1
```
````

```{r}
#| label: tbl-confianza
#| tbl-cap: "Confianza interpersonal según país"
#| tbl-cap-location: top
#| warning: false
tabla1

names(lapop)
```

En este caso, a nuestra tabla le daremos el nombre de _confianza_ más el prefijo `tbl-`. Y para referenciar dentro de un texto a la tabla usamos: `@tbl-confianza`.

Texto de ejemplo:

> En la @tbl-confianza se muestra la distribución porcentual del grado de confianza interpersonal por país. 

## b. Resultados

También podemos referenciar a resultados estadísticos que hayamos realizado con anterioridad en nuestro documento. 

Como ejemplo, obtengamos la correlación entre el índice de Gini de los países y su producto interno bruto (PIB) y lo guardamos en un objeto `M`.

```{r cor, echo=TRUE, message=FALSE, warning=FALSE}
M <- cor(lapop$gini, lapop$gdp)

M
```


Para referenciar este resultado, usamos en el texto:

    `r ''
    
    ` `r `
    
Dentro de las comillas ' ' y después de la letra _r_, indicamos el nombre del objeto que contiene un resultado. En este caso, para referenciar el resultado indicamos: 

![](../files/resul-m.png)

**Texto de ejemplo:**

> El coeficiente de correlación de Pearson entre el índice de Gini y el producto interno bruto es negativo y pequeño = `'r M'`.

**Texto de resultado:**

> El coeficiente de correlación de Pearson entre el índice de Gini y el producto interno bruto es negativo y pequeño = `r M`.

Esta opción es especialmente útil cuando estamos escribiendo un análisis de resultados, ya que ante cualqueier contingencia con los datos, no es necesario cambiar los datos en el texto.

Un uso más avanzado de esta opción es hacer condicional el texto en base al objeto guardado. Por ejemplo:

>  El coeficiente de correlación de Pearson entre el índice de Gíni y el producto interno bruto es `'r if(M > 0){"positivo"} else {"negativo"}'` y pequeño = `'r M'`.

Y el resultado sería:

>  El coeficiente de correlación de Pearson entre el índice de Gíni y el producto interno bruto es `r if(M > 0){"positivo"} else {"negativo"}` y pequeño = `r M`.

# Resumen

Hoy aprendimos a generar y presentar tablas en documentos dinámicos con Quarto, así como también a autoreferenciar elementos dentro de un documento qmd. En detalle, aprendímos:

1.  Generación y presentación de tablas en Quarto a través de `kable()` y `kableExtra`
2.  Otras opciones de tablas rapidas para distintos tipos de análisis
3.  Cómo autoreferenciar elementos dentro un documento Quarto.
