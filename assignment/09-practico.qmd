---
title: "Reportes dinámicos 3"
date: "2023-11-07"
lang: es
website:
  comments:
    giscus:
      repo: cursos-metodos-facso/correlacional
---

```{r librerias1, echo=FALSE, warning=FALSE, message=FALSE, collapse=TRUE}
library(pacman)
pacman::p_load(tidyverse,   # manipulacion datos
               sjPlot,      # tablas
               confintr,    # IC
               gginference, # visualizacion 
               rempsyc,     # reporte
               broom,       # varios
               sjmisc,      # para descriptivos
               knitr)       # para       

options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
```


# Objetivo de la práctica

El objetivo de esta guía práctica es generar una plantilla de informe que nos sirva para desarrollar el trabajo final del curso, de manera colaborativa.

En detalle, aprenderemos los siguientes contenidos:

1.  Creación y organización de un informe en Quarto
2.  Generación y presentación de tablas y gráficos en Quarto.
3.  Cómo autoreferenciar elementos dentro un documento Quarto.

Además de la plantilla para el informe, dejamos a disposición una [carpeta](https://github.com/cursos-metodos-facso/plantilla_informe) con un proyecto de R y la estructura de carpetas recomendada para la elaboración del trabajo:

-   *input*: insumos, libro de códigos
-   *input/img*: imágenes
-   *input/data*: base de datos original
-   *procesamiento*: archivos de sintaxis .R
-   *output*: bases de datos procesada, informes, tablas, gráficos

Recordemos que este sistema de carpetas hace referencia al sistema IPO (Input-Procesamiento-Output).

![](../files/ipo-rproj.png)

Donde el flujo de trabajo es el siguiente:

![](../files/ipo-exp.png)

Por último, Para los ejemplos de esta plantilla utilizaremos la encuesta ELSOC, pero como sabemos, el trabajo se realiza con la encuesta CASEN.


# Quarto

[Quarto](https://quarto.org/) es un sistema de publicación técnico y científico de código abierto. Es un lenguaje para crear y formatear documentos, similar a **Markdown**, aunque más general, con nuevas características y capacidades.

No es exclusivo de R, también funciona con Python, Julia, y Observable.

Como R Markdown, Quarto usa knitr para ejcutar códigos de R, y por lo tanto es capaz de renderizar la mayor parte de los archivos .Rmd sin necesidad de hacer modificaciones. Es así como lo que hemos hecho con R Markdown funciona en Quarto, sin embargo, el uso de Quarto se ha masificado en el último tiempo, con su mayor amplitud de recursos.

El nombre de Quarto viene del formato de un libro o panfleto producido a partir de hojas completas impresas con ocho páginas de texto, cuatro en cada lado, que luego se pliegan dos veces para producir cuatro hojas. Las hojas se recortan a lo largo de los pliegues para producir ocho páginas de libro. Cada página impresa se presenta como un cuarto del tamaño de la hoja completa.

El libro impreso más antiguo de Europa conocido es un quarto, el Sibyllenbuch, que se cree que fue impreso por Johannes Gutenberg en 1452-53, antes de la Biblia de Gutenberg, y que sobrevive solo como un fragmento. 

Lo que nos remite a las ideas de ciencia abierta y a la posibilidad de universalizar el conocimiento.


# Organización de un informe en Quarto


## Crear un documento Quarto

Para generar un documento Quarto hacemos lo siguiente:

![](../files/crear-qmd.gif)


## Encabezado o YAML

Para comenzar, definiremos los elementos que van en el encabezado (front matter o YAML), al menos debemos especificar:

-   Título
-   Subtítulo
-   Autores
-   Fecha
-   Idioma

![](../files/yaml_informe.png)


Con ese YAML el encabezado se ve de la siguiente forma:


![](../files/encabezado.png)


## Apartados y subapartados

Para los títulos de los *apartados* deben poner un # antes del nombre, y para los *subapartados* cada vez más pequeños dos o más #.

Por ejemplo, si ponemos:

\# Variables

\## Descripción de variables

Los apartados y subapartados diferirán en su tamaño y se verán de esta forma.

![](../files/apartados.png)


## Insertar imágenes

Si quisiéramos poner una imagen, lo ideal es llamarla desde la web:


> Recordemos que si no queremos que se vea un chunk, en las options debemos poner `echo=FALSE`.


```{r}
include_graphics("https://www.desarrollosocialyfamilia.gob.cl/storage/image/banner-saludmental.png")
```


O desde la carpeta local `![](../input/img/nombre_imagen.extension)` o con: 

```{r}
include_graphics("../files/banner-saludmental.png")
```


# Procesamiento de datos

El procesamiento de datos lo realizaremos en un archivo de sintaxis `proc_data.R`, que alojaremos en la carpeta de _procesamiento_. 

## Carga de librerías

Las librerías que utilizaremos en esta guía práctica son:

```{r librerias, warning=FALSE, message=FALSE, collapse=TRUE}
library(pacman)
pacman::p_load(tidyverse,   # manipulacion datos
               sjPlot,      # tablas
               confintr,    # IC
               gginference, # visualizacion 
               rempsyc,     # reporte
               broom,       # varios
               sjmisc,      # para descriptivos
               knitr)       # para       

options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
```


## Carga de datos

Como señalamos antes, cargaremos los datos del Estudio Longitudinal Social de Chile (ELSOC) para ejemplificar. En esta guía práctica llamaremos los datos desde la web, pero en la carpeta del proyecto se encuentran alojados en la carpeta `input/data`, y se llama de la siguiente forma:

`load("input/data/ELSOC_Long.RData")`
    
Pero, para llamar la base de datos desde la web:

```{r datos, warning=FALSE, message=FALSE}
load(url("https://dataverse.harvard.edu/api/access/datafile/7245118"))
```


## Limpieza de datos

Realizaremos un tratamiento simple de los casos:

```{r procesamiento, warning=FALSE, message=FALSE}
# Filtrar casos y seleccionar variables
data <- elsoc_long_2016_2022.2 %>% 
  filter(ola==1) %>%
  select(sexo=m0_sexo,edad=m0_edad,nedu=m01,
         s11_01,s11_02,s11_03,s11_04,s11_05,s11_06,s11_07,s11_08,s11_09)

# remover NA's
data <- data %>% 
  set_na(., na = c(-888, -999)) %>% 
  na.omit()

# crear variable nueva 
data <- data %>% 
  rowwise() %>%
  mutate(sint_depresivos = mean(c(s11_01,s11_02,s11_03,s11_04,s11_05,s11_06,s11_07,s11_08,s11_09))) %>% 
  ungroup()
```


## Guardar base de datos resultante

Guardamos la base de datos procesada en la carpeta de _output_, con 

`saveRDS(data, "output/data.Rdata")`

```{r, echo=FALSE, warning=FALSE, message=FALSE}
saveRDS(data, "../assignment/data/data.RData")
```


# Informe

## Introducción

> En este apartado pueden poner su introducción, de acuerdo con la pauta del trabajo que se encuentra disponible en el [enlace](https://correlacional.netlify.app/trabajos).

En este ejemplo daremos una mirada a la salud mental, y exploraremos posibles asociaciones con la edad, sexo y nivel educacional. 


## Variables

> En este apartado pueden poner sus variables, de acuerdo con la pauta del trabajo que se encuentra disponible en el [enlace](https://correlacional.netlify.app/trabajos).

A continuación, en nuestro ejemplo describiremos las variables necesarias para responder a nuestro objetivo.


## Descripción de variables

En este ejemplo, se seleccionaron las variables:

-   sexo: sexo del encuestado, con nivel de medición nominal
-   edad: edad del encuestado, con nivel de medición intervalar
-   nedu: nivel educativo del encuestado, con nivel de medición ordinal

Y las variables del módulo de Salud y Bienestar, referentes a *Estado de ánimo: sintomatología depresiva*, con nivel de medición ordinal, los ítems son los siguientes:

-   Frecuencia: Poco interés o alegría
-   Frecuencia: Decaimiento, pesadez o desesperanza
-   Frecuencia: Dificultad para dormir o exceso de sueño
-   Frecuencia: Cansancio o sensación de falta de energía
-   Frecuencia: Apetito disminuido o aumentado
-   Frecuencia: Dificultad para concentrarse
-   Frecuencia: Mala opinión de sí mismo
-   Frecuencia: Enlentecimiento físico
-   Frecuencia: Pensamiento de muerte o dañarse

> Podemos caargar los datos en nuestro informe sin que se vea poniendo la option `echo=FALSE`: `data <-readRDS("output/data.RData")`.

```{r, warning=FALSE, message=FALSE}
tab1 <- data %>%
  group_by(sexo) %>% # agrupamos por sexo
  summarise(n = n()) %>% # contamos por categ de respuesta
  mutate(prop = round((n / sum(n)) * 100, 2)) # porcentaje
 
pm <- as.numeric(tab1[2,3])
ph <- as.numeric(tab1[1,3])

tabla1 <- tab1 %>% 
  kableExtra::kable(format = "html",
                    align = "c",
                    col.names = c("Sexo", "n", "Proporción"),
                    caption = "Tabla 1. Distribución de sexo") %>% 
  kableExtra::kable_classic(full_width = FALSE, position = "center", font_size = 14) %>% 
  kableExtra::add_footnote(label = "Fuente: Elaboración propia en base a ELSOC 2016.")

```

En la @tbl-sexo podemos ver que la proporción de mujeres que responde la encuesta corresponde a `r pm`%, mientras que la propoción de hombres corresponde a `r ph`%.


```{r tbl-sexo, warning=FALSE, message=FALSE}
#| label: tbl-sexo
#| tbl-cap: "Distribución de sexo"
#| tbl-cap-location: top
#| warning: false
tabla1
```

> En las options del chunk desde el que llamamos a la tabla le ponemos `tbl-nombre tabla` para etiquetarla, y luego en el texto ponemos `@tbl-nombre-tabla` para referenciarla. 
También, cuando queremos llamar un valor, es necesario asignarlo a un objeto, y en el texto lo llamamos con:

![](../files/resul-m.png)


## Análisis

> En este apartado pueden poner sus análisis, de acuerdo con la pauta del trabajo que se encuentra disponible en el [enlace](https://correlacional.netlify.app/trabajos).

En nuestro ejemplo, analizaremos la correlación entre algunas variables.

```{r, warning=FALSE, message=FALSE}
cor_edad_dep <- cor(data$edad, data$sint_depresivos)
cor_nedu_dep <- cor(data$nedu, data$sint_depresivos)
cor_nedu_edad <- cor(data$nedu, data$edad)
```

```{r, warning=FALSE, message=FALSE}
g1 <- data %>% 
  group_by(nedu) %>% 
  summarise(sint_dep = mean(sint_depresivos, na.rm = T),
            edad=mean(edad, na.rm = T))

grafico1 <- ggplot(data = g1,
       mapping = aes(x = sint_dep, y = edad, label = nedu)) +
  geom_point() +
  geom_smooth(method = "lm",colour = "black",fill="lightblue",size=0.5) + 
  labs(x = "Sintomatología depresiva",
       y = "Edad",
       caption = "Fuente: Elaboración propia en base a ELSOC 2026") +
  theme_bw()

```

En la @fig-cor_edad_dep es posible apreciar... La correlación entre la edad y el promedio de la sintomatología depresiva corresponde a `r cor_edad_dep`.

```{r fig-cor_edad_dep}
#| label: fig-cor_edad_dep
#| fig-cap: "Correlación entre edad y sintomatología depresiva"
#| warning: false
#| message: false
#| fig-align: center
#| out-width: 80%
grafico1
```

> En las options del chunk desde el que llamamos a la figura le ponemos `fig-nombre figura` para etiquetarla, y luego en el texto ponemos `@fig-nombre-figura` para referenciarla. 

## Conclusiones

> En este apartado pueden poner sus conclusiones, de acuerdo con la pauta del trabajo que se encuentra disponible en el [enlace](https://correlacional.netlify.app/trabajos).

Aquí redactamos algunas conclusiones.

##  Bibliografía

> En este apartado pueden poner su bibliografía, de acuerdo con la pauta del trabajo que se encuentra disponible en el [enlace](https://correlacional.netlify.app/trabajos).

Ponemos un `-` para generar un listado.

-   COES (2023). *Radiografía del Cambio Social: Análisis de Resultados Longitudinales ELSOC 2016-2022. Presentación de Resultados COES*. Marzo, Santiago de Chile.

-   R Core Team (2023). *R: A Language and Environment for Statistical Computing*. R Foundation for Statistical Computing, Vienna, Austria. <https://www.R-project.org/>.


# Visualizacion informe

Finalmente, podemos ver el informe que hemos creado en este [enlace](https://rpubs.com/DaniOlivaresCollio/1118647).


# Reporte de progreso

Completar el reporte de progreso correspondiente a esta práctica [aquí](https://docs.google.com/forms/d/1cJbjoBBweNANbBaEb4PGIg9wGJdA_bDRap-gMc3Ma3c/edit). El plazo para contestarlo es hasta el día martes de la semana siguiente a la que se publica la práctica correspondiente.


# Video de práctica

{{< video https://youtu.be/FvcfVg-ONiM >}}



# Foro

```{=html}
<script src="https://giscus.app/client.js"
        data-repo="cursos-metodos-facso/correlacional"
        data-repo-id="R_kgDOKCMXJQ"
        data-category="Q&A"
        data-category-id="DIC_kwDOKCMXJc4CYd9S"
        data-mapping="title"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="bottom"
        data-theme="light"
        data-lang="es"
        crossorigin="anonymous"
        async>
</script>
```
